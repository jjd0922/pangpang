<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.newper.mapper.PoMapper">
    <sql id="includeEstimateDataTable">
        <if test='peName != null and peName != ""'>AND PE_NAME LIKE CONCAT('%',#{peName},'%')</if>
        <if test='comName != null and comName != ""'>AND COM_NAME LIKE CONCAT('%',#{comName},'%')</if>
        <if test='peCode != null and peCode != ""'>AND PE_CODE LIKE CONCAT('%',#{peCode},'%')</if>
        <if test='createdBy != null and createdBy != ""'>AND PO_ESTIMATE.CREATED_BY LIKE CONCAT('%',#{createdBy},'%')</if>
        <if test='createdDate != null and createdDate != ""'>AND PO_ESTIMATE.CREATED_DATE BETWEEN SUBSTR(#{createdDate}, 1, 10) AND SUBSTR(#{createdDate}, 13)</if>
        <if test='modifiedBy != null and modifiedBy != ""'>AND PO_ESTIMATE.MODIFIED_BY LIKE CONCAT('%',#{modifiedBy},'%')</if>
        <if test='modifiedDate != null and modifiedDate != ""'>AND PO_ESTIMATE.MODIFIED_DATE BETWEEN SUBSTR(#{modifiedDate}, 1, 10) AND SUBSTR(#{modifiedDate}, 13)</if>
        <if test="pePeriod != null and pePeriod != ''">
            AND (PE_START BETWEEN SUBSTR(#{pePeriod}, 1, 10) AND SUBSTR(#{pePeriod}, 13) OR
                PE_END BETWEEN SUBSTR(#{pePeriod}, 1, 10) AND SUBSTR(#{pePeriod}, 13))
        </if>
        <if test='peState != null'>
            <foreach collection="peState" open="AND PE_STATE IN (" separator="," close=")" item="item">
                #{item}
            </foreach>
        </if>
    </sql>
    <select id="selectEstimateDataTable" resultType="Map">
        SELECT
            PE_IDX,
            PE_CODE,
            PE_STATE,
            COM_NAME,
            PE_NAME,
            FORMAT(PE_COUNT , 0) AS 'PE_COUNT',
            FORMAT(PE_COST , 0) AS 'PE_COST',
            PE_FILE,
            PE_FILE_NAME,
            CONCAT(PE_START, ' ~ ', PE_END) AS 'PE_PERIOD',
            PO_ESTIMATE.CREATED_BY AS 'CREATED_BY',
            PO_ESTIMATE.CREATED_DATE AS 'CREATED_DATE',
            PO_ESTIMATE.MODIFIED_BY AS 'MODIFIED_BY',
            PO_ESTIMATE.MODIFIED_DATE AS 'MODIFIED_DATE'
        FROM
            po_estimate
                LEFT JOIN company ON PE_COM_IDX = COM_IDX
        WHERE
            PE_IDX IS NOT NULL
            <include refid="includeEstimateDataTable"></include>
        <if test="length!=-1">
            LIMIT #{start},#{length}
        </if>
    </select>

    <select id="countEstimateDataTable" resultType="Long">
        SELECT
            COUNT(*)
        FROM
            po_estimate
                LEFT JOIN company ON PE_COM_IDX = COM_IDX
        WHERE
            PE_IDX IS NOT NULL
            <include refid="includeEstimateDataTable"></include>
    </select>

    <select id="selectEstimateProduct" resultType="Map">
        SELECT
            P_IDX,
            P_NAME,
            brand.CATE_NAME AS 'BRAND',
            category.CATE_NAME AS 'CATEGORY',
            P_SELL_PRICE,
            FORMAT(P_SELL_PRICE , 0) AS 'P_SELL_PRICE_COMMA',
            PEP_COUNT,
            PEP_COST,
            FORMAT(PEP_COUNT * PEP_COST , 0) AS 'SUM'
        FROM
            po_estimate
                LEFT JOIN po_estimate_product ON PE_IDX = PEP_PE_IDX
                LEFT JOIN product ON PEP_P_IDX = P_IDX
                LEFT JOIN category AS category ON P_CATE_IDX = category.CATE_IDX
                LEFT JOIN category AS brand ON P_CATE_IDX2 = brand.CATE_IDX
        WHERE
            PE_IDX = #{peIdx}
        AND
            PEP_IDX IS NOT NULL
    </select>

    <sql id="includePoDataTable">
        <if test="poState != null and poState != ''">
            <foreach collection="poState" open="AND PO_STATE IN (" separator="," close=")" item="item">
                #{item}
            </foreach>
        </if>
        <if test="uName != null and uName != ''">
            AND U_NAME LIKE CONCAT ('%', #{uName}, '%')
        </if>

        <if test="comName != null and comName != ''">
            AND BUY.COM_NAME LIKE CONCAT ('%', #{comName}, '%')
        </if>

        <if test="poInDate != null and poInDate != ''">
            AND PO_IN_DATE BETWEEN SUBSTR(#{poInDate}, 1, 10) AND SUBSTR(#{poInDate}, 13)
        </if>
        <if test="poDueDate != null and poDueDate != ''">
            AND PO_DUE_DATE BETWEEN SUBSTR(#{poDueDate}, 1, 10) AND SUBSTR(#{poDueDate}, 13)
        </if>

        <if test="poRefundDate != null and poRefundDate != ''">
            AND PO_REFUND_DATE BETWEEN SUBSTR(#{poRefundDate}, 1, 10) AND SUBSTR(#{poRefundDate}, 13)
        </if>

        <if test="poAsDate != null and poAsDate != ''">
            AND PO_AS_DATE BETWEEN SUBSTR(#{poAsDate}, 1, 10) AND SUBSTR(#{poAsDate}, 13)
        </if>

        <if test="poRepurchase != null and poRepurchase != ''">
            AND PO_REPURCHASE = #{poRepurchase}
        </if>

        <if test="createdBy != null and createdBy != ''">
            AND po.CREATED_BY LIKE CONCAT ('%', #{createdBy}, '%')
        </if>

        <if test="createdDate != null and createdDate != ''">
            AND PO.CREATED_DATE BETWEEN SUBSTR(#{createdDate}, 1, 10) AND SUBSTR(#{createdDate}, 13)
        </if>

        <if test="createdBy != null and createdBy != ''">
            AND po.CREATED_BY LIKE CONCAT ('%', #{createdBy}, '%')
        </if>

        <if test="createdDate != null and createdDate != ''">
            AND PO.CREATED_DATE BETWEEN SUBSTR(#{createdDate}, 1, 10) AND SUBSTR(#{createdDate}, 13)
        </if>

        <if test="modifiedBy != null and modifiedBy != ''">
            AND po.MODIFIED_BY LIKE CONCAT ('%', #{modifiedBy}, '%')
        </if>

        <if test="modifiedDate != null and modifiedDate != ''">
            AND PO.MODIFIED_DATE BETWEEN SUBSTR(#{modifiedDate}, 1, 10) AND SUBSTR(#{modifiedDate}, 13)
        </if>

        <if test="hwAprvId != null and hwAprvId != ''">
            AND HW_APRV_ID LIKE CONCAT ('%', #{hwAprvId}, '%')
        </if>

        <if test="hwAprvDate != null and hwAprvDate != ''">
            AND HW_APRV_DATE BETWEEN SUBSTR(#{hwAprvDate}, 1, 10) AND SUBSTR(#{hwAprvDate}, 13)
        </if>

        <if test="poState != null and poState != ''">
            AND PO_STATE = #{poState}
        </if>

        <if test="igState != null and igState != ''">
            AND IG_STATE = #{igState}
        </if>

        <if test="whName != null and whName != ''">
            AND WH_NAME LIKE CONCAT('%', #{whName}, '%')
        </if>

        <if test="poIdx != null and poIdx != ''">
            AND PO_IDX = #{poIdx}
        </if>
    </sql>
    <select id="selectPoDataTable" resultType="Map">
        SELECT
            PO_IDX,
            PO_STATE,
            U_NAME,
            BUY.COM_NUM AS BUY_COM_NUM,
            BUY.COM_NAME AS BUY_COM_NAME,
            PO_TOTAL_AMOUNT,
            PO_SELL_PROFIT,
            PO_SELL_TOTAL_AMOUNT,
            PO_DELIVERY_MAIN,
            PO_IN_DATE,
            PO_DUE_DATE,
            PO_REFUND_DATE,
            PO_AS_DATE,
            PO_BUY_SELL_PERIOD,
            PO_DELIVERY_COST,
            PO_REPURCHASE,
            PO.CREATED_BY AS 'CREATED_BY',
            PO.CREATED_BY AS 'CREATED_DATE',
            hiworks.HW_APRV_ID AS 'HW_APRV_ID',
            hiworks.HW_APRV_DATE AS 'HW_APRV_DATE',
            PO.MODIFIED_BY AS 'MODIFIED_BY',
            PO.MODIFIED_DATE AS 'MODIFIED_DATE',
            HW_MEMO,
            WH_NAME,
            IG_STATE,
            (SELECT COUNT(PP_P_IDX) FROM PO_PRODUCT WHERE PP_PO_IDX = PO_IDX) AS TOTAL_PRODUCT_COUNT,
            (SELECT COUNT(*) FROM GOODS WHERE G_PO_IDX = PO_IDX) AS IN_GOODS_COUNT,
            (SELECT COUNT(*) FROM GOODS WHERE G_PO_IDX = PO_IDX AND G_STATE NOT IN ('RECEIVED', 'CHECK_REQ', 'CHECK_ING')) AS IN_COM,
            (SELECT COUNT(*) FROM GOODS WHERE G_PO_IDX = PO_IDX AND G_STATE IN ('RECEIVED', 'CHECK_REQ', 'CHECK_ING')) AS IN_ING,
            IFNULL((SELECT SUM((PP_COST+PP_FIX_COST+PP_PAINT_COST+PP_PROCESS_COST)*PP_COUNT) FROM PO_PRODUCT WHERE PP_PO_IDX = PO_IDX),0) AS TOTAL_CREATED_COST,
            IFNULL((SELECT SUM((PP_SELL_PRICE-PP_COST+PP_FIX_COST+PP_PAINT_COST+PP_PROCESS_COST)*PP_COUNT) FROM PO_PRODUCT WHERE PP_PO_IDX = PO_IDX),0) AS TOTAL_PROFIT,
            @IN_COST:=IFNULL((SELECT SUM(POR_COST*POR_COUNT) FROM PO_RECEIVED WHERE POR_PO_IDX = PO_IDX),0) AS IN_COST,
            @IN_CREATE_COST:=@IN_COST+IFNULL((SELECT SUM(G_JSON ->> '$.paintCost' + G_JSON ->> '$.fixCost' + G_JSON ->> '$.processCost') FROM goods WHERE G_PO_IDX = PO_IDX),0) AS IN_CREATE_COST,
            @IN_SELL_COST:=IFNULL((SELECT SUM(POR_SELL_PRICE*POR_COUNT) FROM PO_RECEIVED WHERE POR_PO_IDX = PO_IDX),0) AS IN_SELL_COST,
            @IN_PROFIT_COST:=@IN_CREATE_COST-@IN_SELL_COST AS IN_PROFIT_COST,
            @IN_PROFIT_PER:=@IN_PROFIT_COST/@IN_SELL_COST*100 AS IN_PROFIT_PER
        FROM
            PO
                LEFT JOIN COMPANY AS BUY ON PO_COM_IDX = BUY.COM_IDX
                LEFT JOIN COMPANY AS SELL ON PO_SELL_COM_IDX = SELL.COM_IDX
                LEFT JOIN HIWORKS ON PO_HW_IDX = HW_IDX
                LEFT JOIN USER ON HW_U_IDX = U_IDX
                LEFT JOIN IN_GROUP ON PO_IDX = IG_PO_IDX
                LEFT JOIN WAREHOUSE ON PO_WH_IDX = WH_IDX
        <where>
            <include refid="includePoDataTable"></include>
        </where>
        ORDER BY
            PO_IDX DESC
        <if test="length!=-1">
        LIMIT
            #{start},#{length}
        </if>
    </select>
    <select id="countPoDataTable" parameterType="map" resultType="Integer">
        SELECT
            COUNT(*)
        FROM
            PO
                LEFT JOIN COMPANY AS BUY ON PO_COM_IDX = BUY.COM_IDX
                LEFT JOIN COMPANY AS SELL ON PO_SELL_COM_IDX = SELL.COM_IDX
                LEFT JOIN HIWORKS ON PO_HW_IDX = HW_IDX
                LEFT JOIN USER ON HW_U_IDX = U_IDX
                LEFT JOIN IN_GROUP ON PO_IDX = IG_PO_IDX
                LEFT JOIN WAREHOUSE ON PO_WH_IDX = WH_IDX
        <where>
            <include refid="includePoDataTable"></include>
        </where>
    </select>

    <sql id="includeInDatatable">
        (PO_TYPE = 'EMERGENCY' OR PO_STATE = 'COMPLETE')
        <if test="igState != null and igState != ''">
            <foreach collection="igState" open="AND IG_STATE IN (" separator="," close=")" item="item">
                #{item}
            </foreach>
        </if>
        <if test="uName != null and uName != ''">AND IG_U.U_NAME LIKE CONCAT ('%', #{uName}, '%')</if>
        <if test="comName != null and comName != ''">AND BUY.COM_NAME LIKE CONCAT ('%', #{comName}, '%')</if>
        <if test="igReceivedDate != null and igReceivedDate != ''">AND IG_RECEIVED_DATE BETWEEN SUBSTR(#{igReceivedDate}, 1, 10) AND SUBSTR(#{igReceivedDate}, 13)</if>
        <if test="igDate != null and igDate != ''">AND IG_DATE BETWEEN SUBSTR(#{igDate}, 1, 10) AND SUBSTR(#{igDate}, 13)</if>
        <if test="uName2 != null and uName2 != ''">AND COM_U.U_NAME LIKE CONCAT ('%', #{uName2}, '%')</if>
        <if test="poDate != null and poDate != ''">AND PO_DATE BETWEEN SUBSTR(#{poDate}, 1, 10) AND SUBSTR(#{poDate}, 13)</if>
        <if test="poIdx != null and poIdx != ''">AND PO_IDX LIKE CONCAT ('%', #{poIdx}, '%')</if>
        <if test="comName != null and comName != ''">AND COM_NAME LIKE CONCAT ('%', #{comName}, '%')</if>
        <if test="poInDate != null and poInDate != ''">AND PO_IN_DATE BETWEEN SUBSTR(#{poInDate}, 1, 10) AND SUBSTR(#{poInDate}, 13)</if>
        <if test="poRefundDate != null and poRefundDate != ''">AND PO_REFUND_DATE BETWEEN SUBSTR(#{poRefundDate}, 1, 10) AND SUBSTR(#{poRefundDate}, 13)</if>
        <if test="poAsDate != null and poAsDate != ''">AND PO_AS_DATE BETWEEN SUBSTR(#{poAsDate}, 1, 10) AND SUBSTR(#{poAsDate}, 13)</if>
        <if test="poBuySellPeriod != null and poBuySellPeriod != ''">AND PO_BUY_SELL_PERIOD BETWEEN SUBSTR(#{poBuySellPeriod}, 1, 10) AND SUBSTR(#{poBuySellPeriod}, 13)</if>
        <if test="poRepurchase != null and poRepurchase != ''">AND PO_REPURCHASE LIKE CONCAT ('%', #{poRepurchase}, '%')</if>
        <if test="whName != null and whName != ''">AND IG_WH.WH_NAME LIKE CONCAT ('%', #{whName}, '%')</if>
    </sql>
    <select id="selectInDatatable" parameterType="map" resultType="map">
        SELECT
            PO_TYPE,
            IG_STATE,
            COM_U.U_NAME AS U_NAME,
            IG_RECEIVE_DATE,
            IG_DATE,
            IG_WH.WH_NAME AS IG_WH_NAME,
            PO.CREATED_BY AS CREATED_BY,
            PO.CREATED_DATE AS CREATED_DATE,
            PO_IDX,
            COM_NAME,
            COM_NUM,
            PO_TOTAL_COUNT,
            PO_TOTAL_AMOUNT,
            PO_DELIVERY_MAIN,
            PO_DELIVERY_COST,
            PO_IN_DATE,
            PO_DUE_DATE,
            PO_AS_DATE,
            PO_BUY_SELL_PERIOD,
            PO_REPURCHASE,
            (SELECT SUM(IP_COUNT) FROM IN_PRODUCT WHERE IP_IG_IDX = IG_IDX) AS TOTAL_IP_COUNT
        FROM
            PO
                LEFT JOIN WAREHOUSE AS PO_WH ON PO_WH_IDX = PO_WH.WH_IDX
                LEFT JOIN COMPANY ON PO_COM_IDX = COM_IDX
                LEFT JOIN USER AS COM_U ON COM_U_IDX = COM_U.U_IDX
                LEFT JOIN IN_GROUP ON PO_IDX = IG_PO_IDX
                LEFT JOIN USER AS IG_U ON IG_U_IDX = IG_U.U_IDX
                LEFT JOIN WAREHOUSE AS IG_WH ON IG_WH_IDX = IG_WH.WH_IDX
        <where>
            <include refid="includeInDatatable"></include>
        </where>
        ORDER BY
            PO_IDX DESC
    </select>
    <select id="countInDatatable" parameterType="map" resultType="Integer">
        SELECT
            COUNT(*)
        FROM
            PO
                LEFT JOIN WAREHOUSE AS PO_WH ON PO_WH_IDX = PO_WH.WH_IDX
                LEFT JOIN COMPANY ON PO_COM_IDX = COM_IDX
                LEFT JOIN USER AS COM_U ON COM_U_IDX = COM_U.U_IDX
                LEFT JOIN IN_GROUP ON PO_IDX = IG_PO_IDX
                LEFT JOIN USER AS IG_U ON IG_U_IDX = IG_U.U_IDX
                LEFT JOIN WAREHOUSE AS IG_WH ON IG_WH_IDX = IG_WH.WH_IDX
        <where>
            <include refid="includeInDatatable"></include>
        </where>
    </select>
    <sql id="includePoApprovedDatatable">
        (PO_STATE = 'APPROVAL')

    </sql>
    <select id="selectPoApprovedDatatable" resultType="map" parameterType="map">
        SELECT
            PO_IDX,
            PO_STATE
        FROM
            PO
                LEFT JOIN HIWORKS ON PO_HW_IDX = HW_IDX
        <where>
            <include refid="includePoApprovedDatatable"></include>
        </where>

        <if test="length!=-1">
            LIMIT #{start},#{length}
        </if>
    </select>
    <select id="countPoApprovedDatatable" resultType="Integer" parameterType="map">
        SELECT
            COUNT(*)
        FROM
            PO
                LEFT JOIN HIWORKS
                    ON PO_HW_IDX=HW_IDX
        <where>
            <include refid="includePoApprovedDatatable"></include>
        </where>
    </select>
    <select id="selectInPoDatatable" resultType="map" parameterType="map">
        SELECT
            P_IDX,
            P_NAME,
            IFNULL(CONCAT (PP_OPTION ->> '$[0].title', ':', PP_OPTION ->> '$[0].values'), '') AS OPTION1,
            IFNULL(CONCAT (PP_OPTION ->> '$[1].title', ':', PP_OPTION ->> '$[1].values'), '') AS OPTION2,
            IFNULL(CONCAT (PP_OPTION ->> '$[2].title', ':', PP_OPTION ->> '$[2].values'), '') AS OPTION3,
            P_SELL_PRICE,
            PP_COST,
            PP_COUNT,
            PP_COST * PP_COUNT PP_TOTAL,
            BUY.SPEC_LOOKUP SPEC_BUY,
            SELL.SPEC_LOOKUP SPEC_SELL
        FROM
            PO
                LEFT JOIN PO_PRODUCT ON PO_IDX = PP_PO_IDX
                LEFT JOIN PRODUCT ON PP_P_IDX = P_IDX
                LEFT JOIN SPEC AS BUY ON PP_SPEC_IDX = BUY.SPEC_IDX
                LEFT JOIN SPEC AS SELL ON PP_SPEC_IDX2 = SELL.SPEC_IDX
        WHERE
            PP_PO_IDX = #{po_idx}
        ORDER BY
            PP_IDX
    </select>
    <sql id="includeInPpDatatable">
        PP_IDX = #{ppIdx}
        AND PP_PO_IDX = POR_PO_IDX
        AND G_POR_IDX = POR_IDX
        AND POR_P_IDX = PP_P_IDX
        AND ( POR_PP_IDX IS NULL OR POR_PP_IDX = PP_IDX)
    </sql>
    <select id="selectInPpDatatable" resultType="map" parameterType="map">
        SELECT
            *
        FROM
            PO_PRODUCT, GOODS, PO_RECEIVED
        <where>
            <include refid="includeInPpDatatable"></include>
        </where>

        <if test="length!=-1">
            LIMIT #{start},#{length}
        </if>
    </select>
    <select id="countInPpDatatable" resultType="Integer" parameterType="map">
        SELECT
            COUNT(*)
        FROM
            PO_PRODUCT, GOODS, PO_RECEIVED
        <where>
            <include refid="includeInPpDatatable"></include>
        </where>
    </select>
    <update id="updategoods">
        UPDATE in_group,in_product
        SET IP_COUNT = (SELECT COUNT(*) FROM goods WHERE g_po_idx=#{po_idx} AND g_p_idx=#{p_idx})
        WHERE in_group.IG_IDX=in_product.IP_IG_IDX
            AND ig_po_idx=#{po_idx}
            AND IP_P_IDX=#{p_idx}
    </update>

    <select id="selectPoReceivedByPoIdx" resultType="Map">
        SELECT
            P_IDX,
            POR_IDX,
            POR_MEMO,
            P_NAME,
            CATE_NAME,
            IN_SPEC.SPEC_LOOKUP AS INSPEC,
            PROCESS_SPEC.SPEC_LOOKUP AS PROCESSSPEC,
            P_COST,
            POR_COST,
            POR_COUNT,
            POR_SELL_PRICE,
            P_TYPE1,
            IFNULL(CONCAT (POR_OPTION ->> '$[0].title', ':', POR_OPTION ->> '$[0].values'), '') AS OPTION1,
            IFNULL(CONCAT (POR_OPTION ->> '$[1].title', ':', POR_OPTION ->> '$[1].values'), '') AS OPTION2,
            IFNULL(CONCAT (POR_OPTION ->> '$[2].title', ':', POR_OPTION ->> '$[2].values'), '') AS OPTION3
        FROM
            PO_RECEIVED
                LEFT JOIN PO ON POR_PO_IDX = PO_IDX
                LEFT JOIN PRODUCT ON POR_P_IDX = P_IDX
                LEFT JOIN CATEGORY ON P_CATE_IDX2 = CATE_IDX
                LEFT JOIN SPEC AS IN_SPEC ON POR_IN_SPEC_IDX = IN_SPEC.SPEC_IDX
                LEFT JOIN SPEC AS PROCESS_SPEC ON POR_PROCESS_SPEC_IDX = PROCESS_SPEC.SPEC_IDX
        WHERE
            POR_PO_IDX = #{poIdx}
    </select>

    <select id="selectPoProductByPoIdx" resultType="Map">
        SELECT
            PP_IDX,
            PO_IDX,
            P_IDX,
            P_TYPE1,
            PP_MEMO,
            P_NAME,
            IFNULL(CATE_NAME, '') AS CATE_NAME,
            P_COST,
            PP_COST,
            PP_COUNT,
            BUY.SPEC_LOOKUP SPEC_BUY,
            SELL.SPEC_LOOKUP SPEC_SELL,
            PP_FIX_MEMO,
            PP_FIX_COST,
            PP_PAINT_MEMO,
            PP_PAINT_COST,
            PP_PROCESS_MEMO,
            PP_PROCESS_COST,
            PP_SELL_PRICE,
            PP_PROFIT_TARGET,
            P_TYPE1,
            (PP_FIX_COST + PP_PAINT_COST + PP_PROCESS_COST) AS PRODUCT_COST,
            (PP_COST * PP_COUNT) AS TOTAL_BUY_COST,
            (PP_SELL_PRICE * PP_COUNT) AS TOTAL_SELL_PRICE,
            (PP_COST + PP_FIX_COST + PP_PAINT_COST + PP_PROCESS_COST) * PP_COUNT AS CREATE_PRICE,
            IFNULL(CONCAT (PP_OPTION ->> '$[0].title', ':', PP_OPTION ->> '$[0].values'), '') AS OPTION1,
            IFNULL(CONCAT (PP_OPTION ->> '$[1].title', ':', PP_OPTION ->> '$[1].values'), '') AS OPTION2,
            IFNULL(CONCAT (PP_OPTION ->> '$[2].title', ':', PP_OPTION ->> '$[2].values'), '') AS OPTION3
        FROM
            po_product
                LEFT JOIN PO ON PP_PO_IDX = PO_IDX
                LEFT JOIN product ON PP_P_IDX = P_IDX
                LEFT JOIN category ON P_CATE_IDX2 = CATE_IDX
                LEFT JOIN spec AS BUY ON PP_SPEC_IDX = BUY.SPEC_IDX
                LEFT JOIN spec AS SELL ON PP_SPEC_IDX2 = SELL.SPEC_IDX
        WHERE
            PP_PO_IDX = #{poIdx}
    </select>

    <select id="countPoProductByPoIdx" resultType="Integer">
        SELECT
            COUNT(*)
        FROM
            po_product
                LEFT JOIN product ON PP_P_IDX = P_IDX
                LEFT JOIN category ON P_CATE_IDX2 = CATE_IDX
                LEFT JOIN spec AS BUY ON PP_SPEC_IDX = BUY.SPEC_IDX
                LEFT JOIN spec AS SELL ON PP_SPEC_IDX2 = SELL.SPEC_IDX
        WHERE
            PP_PO_IDX = #{poIdx}
    </select>

    <select id="selectInPoProductDatatable" resultType="map" parameterType="map">
        SELECT
            P_IDX,
            P_NAME,
            P_MODEL,
            IFNULL(SUM(PP_COUNT), 0) AS PP_COUNT,
            IP_COUNT
        FROM
            PRODUCT
                LEFT JOIN IN_PRODUCT ON P_IDX = IP_P_IDX
                LEFT JOIN IN_GROUP ON IP_IG_IDX = IG_IDX
                LEFT JOIN PO_PRODUCT ON PP_P_IDX = IP_P_IDX AND PP_PO_IDX = IG_PO_IDX
        WHERE
            IG_PO_IDX = #{po_idx}
        GROUP BY
            IP_P_IDX
    </select>
    <select id="selectPoProductIdxList" resultType="Integer">
        SELECT DISTINCT(PP_P_IDX) FROM PO_PRODUCT
        WHERE PP_PO_IDX = #{poIdx}
    </select>

    <sql id="includeInProductDatatable">
        G_PO_IDX = #{po_idx}
        AND G_P_IDX = #{p_idx}
    </sql>
    <select id="selectInProductDatatable" resultType="map" parameterType="map">
        SELECT
            *
        FROM
            GOODS
        <where>
            <include refid="includeInProductDatatable"></include>
        </where>
        ORDER BY
        G_IDX desc
        <if test="length!=-1">
            LIMIT #{start},#{length}
        </if>
    </select>
    <select id="countInProductDatatable" resultType="Integer" parameterType="map">
        SELECT
            COUNT(*)
        FROM
            GOODS
        <where>
            <include refid="includeInProductDatatable"></include>
        </where>
    </select>

    <select id="selectPoReceivedByProductAndPoAndSpecAndOption" resultType="com.newper.entity.PoReceived">
        SELECT
            *
        FROM
            PO_RECEIVED
                LEFT JOIN PO ON POR_PO_IDX = PO_IDX
                LEFT JOIN PRODUCT ON POR_P_IDX = P_IDX
                LEFT JOIN SPEC ON POR_PROCESS_SPEC_IDX = SPEC_IDX
                LEFT JOIN PO_PRODUCT ON POR_PP_IDX = PP_IDX AND PP_COUNT - POR_COUNT > 0
        WHERE
            SPEC_IDX = #{specIdx}
        AND
            P_IDX = #{pIdx}
        AND
            POR_OPTION = #{option}
        AND
            PO_IDX = #{poIdx}
    </select>

    <select id="selectPoReceivedByPoIdxAndPpIdx" resultType="com.newper.entity.PoReceived">
        SELECT
            *
        FROM
            PO_RECEIVED
                LEFT JOIN PO_PRODUCT ON POR_PP_IDX = PP_IDX AND PP_COUNT - POR_COUNT > 0
        WHERE
            POR_PP_IDX = #{ppIdx}
          AND
            POR_PO_IDX = #{poIdx}
    </select>

    <select id="selectPoProductByPpIdx" resultType="Map">
        SELECT
            *
        FROM
            PO_PRODUCT
        WHERE
            PP_IDX = #{ppIdx}
    </select>

    <delete id="deletePoProductBypoIdx">
        DELETE FROM
            PO_PRODUCT
        WHERE
            PP_PO_IDX = #{poIdx}
            <foreach collection="ppIdxs" item="item">
                AND PP_IDX != #{item}
            </foreach>
    </delete>

    <insert id="insertPoHiworks" parameterType="map">
        INSERT INTO
            PO_HIWORKS
                (POH_ORDER, POH_PO_IDX, POH_HW_IDX)
        VALUES
            <foreach collection="list" separator="," item="item">
                (#{item.order}, #{item.poIdx}, #{item.hwIdx})
            </foreach>
    </insert>

    <select id="selectPoHiworksByPoIdx" resultType="map">
        SELECT
            POH_ORDER,
            POH_PO_IDX,
            POH_HW_IDX
        FROM
            PO_HIWORKS
        WHERE
            POH_PO_IDX = #{poIdx}
        ORDER BY
            POH_ORDER DESC
    </select>

    <delete id="deletePoHiworksBypoIdx">
        DELETE FROM
            PO_HIWORKS
        WHERE
            POH_PO_IDX = #{poIdx}
    </delete>

    <select id="checkPoProductInProduct" resultType="Integer">
        SELECT
            IP_COUNT = PP_COUNT
        FROM
            PRODUCT
                LEFT JOIN PO_PRODUCT ON P_IDX = PP_P_IDX
                LEFT JOIN IN_PRODUCT ON P_IDX = IP_P_IDX and PP_P_IDX = IP_P_IDX
                LEFT JOIN IN_GROUP ON IP_IG_IDX = IG_IDX
        WHERE
            PP_PO_IDX = #{poIdx}
          AND
            IG_PO_IDX = #{poIdx}
    </select>
</mapper>