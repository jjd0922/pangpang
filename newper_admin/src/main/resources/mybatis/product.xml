<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.newper.mapper.ProductMapper">
    <sql id="includeProductDataTable">
        <if test="P_CODE != null and P_CODE != ''">AND P_CODE LIKE CONCAT('%',#{P_CODE},'%')</if>
        <if test="P_NAME != null and P_NAME != ''">AND P_NAME LIKE CONCAT('%',#{P_NAME},'%')</if>
        <if test="P_STATE != null and  P_STATE!=''">AND P_STATE LIKE CONCAT('%',#{P_STATE},'%')</if>
        <if test="P_MODEL != null and P_MODEL !=''">AND P_MODEL LIKE CONCAT('%',#{P_MODEL},'%')</if>
        <if test="P_CATE_IDX2 != null and P_CATE_IDX2 !=''">AND P_CATE_IDX2 like CONCAT('%',#{P_CATE_IDX2},'%')</if>
        <if test="P_USE_STOCK != null and P_USE_STOCK != ''">AND P_USE_STOCK LIKE CONCAT('%',#{P_USE_STOCK},'%')</if>
       <!-- <foreach collection="P_TYPE1" open="AND P_TYPE1 IN (" separator="," close=")" item="item">/*카테고리대분류*/
            #{item}
        </foreach>
        <foreach collection="P_TYPE1" open="AND P_TYPE1 IN (" separator="," close=")" item="item">/*카테고리중분류*/
            #{item}
        </foreach>
        <foreach collection="P_TYPE1" open="AND P_TYPE1 IN (" separator="," close=")" item="item">/*카테고리소분류*/
            #{item}
        </foreach>-->
        <if test="P_TYPE1 != null">
        <foreach collection="P_TYPE1" open="AND P_TYPE1 IN (" separator="," close=")" item="item">
            #{item}
        </foreach>
        </if>
        <if test="P_TYPE2 != null">
        <foreach collection="P_TYPE2" open="AND P_TYPE2 IN (" separator="," close=")" item="item">
            #{item}
        </foreach>
        </if>
        <if test="P_TYPE3 != null">
        <foreach collection="P_TYPE3" open="AND P_TYPE3 IN (" separator="," close=")" item="item">
            #{item}
        </foreach>
        </if>
        <if test="P_COM_IDX != null and P_COM_IDX != ''">AND P_COM_IDX LIKE CONCAT('%',#{P_COM_IDX},'%')</if>
        <if test="P_COM_IDX2 != null and P_COM_IDX2 != ''">AND P_COM_IDX2 LIKE CONCAT('%',#{P_COM_IDX2},'%')</if>
        <if test="P_COM_IDX3 != null and P_COM_IDX3 != ''">AND P_COM_IDX3 LIKE CONCAT('%',#{P_COM_IDX3},'%')</if>
        <if test="CREATED_BY != null and CREATED_BY != ''">AND CREATED_BY LIKE CONCAT('%',#{CREATED_BY},'%')</if>
        <if test="CREATED_DATE != null and CREATED_DATE != ''">AND PRODUCT.CREATED_DATE BETWEEN SUBSTR(#{CREATED_DATE}, 1, 10) AND SUBSTR(#{CREATED_DATE}, 13)</if>
        <if test="CREATED_BY != null and CREATED_BY != ''">AND CREATED_BY LIKE CONCAT('%',#{CREATED_BY},'%')</if>/*수정자*/
        <if test="CREATED_DATE != null and CREATED_DATE != ''">AND PRODUCT.CREATED_DATE BETWEEN SUBSTR(#{CREATED_DATE}, 1, 10) AND SUBSTR(#{CREATED_DATE}, 13)</if>/*수정일*/
        <if test="MODIFIED_BY != null and MODIFIED_BY != ''">AND MODIFIED_BY LIKE CONCAT('%',#{MODIFIED_BY},'%')</if>
        <if test="MODIFIED_DATE != null and MODIFIED_DATE != ''">AND PRODUCT.CREATED_DATE BETWEEN SUBSTR(#{MODIFIED_DATE}, 1, 10) AND SUBSTR(#{MODIFIED_DATE}, 13)</if>
    </sql>
    <select id="selectProductDataTable" resultType="Map">
        SELECT
            dt.CATE_SPEC_LIST AS 'CATE_SPEC_LIST',
            product.*,
            FORMAT(P_SELL_PRICE , 0) AS 'P_SELL_PRICE',
            (case
                 when dt.CATE_DEPTH = 1 then dt.CATE_NAME1
                 when dt.CATE_DEPTH = 2 then dt.CATE_NAME2
                 when dt.CATE_DEPTH = 3 then dt.CATE_NAME3
                end
                ) CATE_NAME1,
            (case
             when dt.CATE_DEPTH = 3 then dt.CATE_NAME2
             when dt.CATE_DEPTH = 2 then dt.CATE_NAME1
            end
            ) CATE_NAME2,
            if(dt.CATE_DEPTH=3,dt.CATE_NAME1,NULL) CATE_NAME3,
            brand.CATE_NAME as 'BRAND_NAME',
                store.COM_NAME AS 'STORE_NAME',
                manufacture.COM_NAME AS 'MANUFACTURE_NAME',
                afterservice.COM_NAME AS 'AFTERSERVICE_NAME',
            replace(JSON_EXTRACT(P_OPTION,'$.p_option_value1'),'"','') OPTION1,
            replace(JSON_EXTRACT(P_OPTION,'$.p_option_value2'),'"','') OPTION2,
            replace(JSON_EXTRACT(P_OPTION,'$.p_option_value3'),'"','') OPTION3
        FROM
            product
                LEFT JOIN (SELECT
                               category1.CATE_NAME AS CATE_NAME1,
                               category1.CATE_IDX AS CATE_IDX1,
                               category1.CATE_DEPTH,
                               category1.CATE_SPEC_LIST AS CATE_SPEC_LIST,
                               category2.CATE_NAME AS CATE_NAME2,
                               category2.CATE_IDX AS CATE_IDX2,
                               category3.CATE_NAME AS CATE_NAME3,
                               category3.CATE_IDX AS CATE_IDX3

                           FROM
                               category AS category1
                                   LEFT JOIN category AS category2
                                             ON category1.CATE_PARENT_IDX = category2.CATE_IDX
                                   LEFT JOIN category AS category3
                                             ON category2.CATE_PARENT_IDX = category3.CATE_IDX)dt
                          ON dt.CATE_IDX1=P_CATE_IDX

                LEFT JOIN category AS brand
                    ON P_CATE_IDX2 = brand.CATE_IDX
                LEFT JOIN company AS store
                    ON P_COM_IDX = store.COM_IDX
                LEFT JOIN company AS manufacture
                    ON P_COM_IDX2 = manufacture.COM_IDX
                LEFT JOIN company AS afterservice
                    ON P_COM_IDX3 = afterservice.COM_IDX
        WHERE
            P_IDX is not null
            <include refid="includeProductDataTable"></include>
         order by P_IDX desc
        <if test="length!=-1">
            limit #{start},#{length}
        </if>
    </select>

    <select id="countProductDataTable" resultType="long">
        SELECT
            COUNT(*)
        FROM
            product
                LEFT JOIN (SELECT
                               category1.CATE_NAME AS CATE_NAME1,
                               category1.CATE_IDX AS CATE_IDX1,
                               category1.CATE_DEPTH,
                               category2.CATE_NAME AS CATE_NAME2,
                               category2.CATE_IDX AS CATE_IDX2,
                               category3.CATE_NAME AS CATE_NAME3,
                               category3.CATE_IDX AS CATE_IDX3
                           FROM
                               category AS category1
                                   LEFT JOIN category AS category2
                                             ON category1.CATE_PARENT_IDX = category2.CATE_IDX
                                   LEFT JOIN category AS category3
                                             ON category2.CATE_PARENT_IDX = category3.CATE_IDX)dt
                          ON dt.CATE_IDX1=P_CATE_IDX

                LEFT JOIN category AS brand
                          ON P_CATE_IDX2 = brand.CATE_IDX
                LEFT JOIN company AS store
                          ON P_COM_IDX = store.COM_IDX
                LEFT JOIN company AS manufacture
                          ON P_COM_IDX2 = manufacture.COM_IDX
                LEFT JOIN company AS afterservice
                          ON P_COM_IDX3 = afterservice.COM_IDX

            WHERE
                P_IDX is not null
                <include refid="includeProductDataTable"></include>


</select>

    <select id="selectProductByListPcode" resultType="String">
        select
            P_CODE
        from
            product
        order by P_IDX desc limit 1
    </select>

    <select id="selectGoodsStockDataTable" resultType="map">
        SELECT
        GS_IDX, GS_THUMB_FILE1, P_CODE, P_STATE, P_NAME, P_IDX,
        P_MODEL, P_COST, P_SELL_PRICE, GS_CODE, GS_NAME,
        GS_PRICE, GS_SALE, GS_RANK, GS_SAFE_STOCK, GS_PROPER_STOCK,
        GS_DAILY, goods_stock.CREATED_BY, goods_stock.CREATED_DATE, goods_stock.MODIFIED_BY, goods_stock.MODIFIED_DATE,
        replace(JSON_EXTRACT(GS_OPTION,'$.OPTION1'),'"','') OPTION1,
        replace(JSON_EXTRACT(GS_OPTION,'$.OPTION2'),'"','') OPTION2,
        replace(JSON_EXTRACT(GS_OPTION,'$.OPTION3'),'"','') OPTION3
        FROM
        goods_stock
        LEFT JOIN product
        ON GS_P_IDX=P_IDX
        WHERE
        GS_IDX IS NOT null
        order by P_IDX desc
        <if test="length!=-1">
            limit #{start},#{length}
        </if>
    </select>
    <select id="countGoodsStockDataTable" resultType="Integer">
        select
            count(*)
        from
            goods_stock
                LEFT JOIN product
                          ON GS_P_IDX=P_IDX
        WHERE
            GS_IDX IS NOT null
    </select>

    <select id="selectGoodsStockByListGsCode" resultType="String">
        select
            GS_CODE
        from
            goods_stock
        order by GS_IDX desc limit 1
    </select>
</mapper>